#!/usr/bin/env node

var fs = require('fs')
var es = require('event-stream')
var request = require('request')
const Sentry = require('@sentry/node');

var argv = require('optimist')
  .usage('Send the status of a run to an outside server. Typically triggered by other tasks.\nUsage: $0')
  .options('r', {
    alias: 'run',
    demand: true,
    describe: 'The Run id to notify for'
  })
  .options('campfire', {
    boolean: true,
    describe: 'Send a message to your configured campfire chatroom'
  })
  .options('slack', {
    boolean: true,
    describe: 'Send a message to your configured slack chatroom'
  })
  .options('v', {
    alias: 'verbose',
    boolean: true,
    describe: 'Return all meta data with each log row'
  })
  .options('c', {
    alias: 'config',
    describe: 'Config path'
  })
  .argv

var configOptions = (argv.config) ? {configPath: argv.config} : {};

var config = require(require('path').resolve(__dirname, '../lib/ummon.js')).loadConfig(configOptions);

var runID = argv.run;
var run;
var header;

es.pipeline(
  fs.createReadStream(config.log.path, {encoding: 'utf8'}),
  es.split(), // Split on new lines
  es.parse(), // JSON.parse()
  es.map(function (data, callback) {
    // Filter out only the runid we want
    if (data.runid === runID) {
      if (data.run) {
        run = data.run
      }
      callback(null, data)
    } else {
      callback()
    }
  }),
  es.stringify(), // JSON.stringify()
  es.map(function (data, callback){
    // If verbose isn't passed, turn the json into
    // a simple string
    if (!argv.verbose) {
      data = JSON.parse(data)

      data = data.msg + '\n';
    }
    callback(null, data)
  }),
  es.wait(function (err, data) {
    header = "[Tasks Error] "+ run.task.id+" exited with code " + run.exitCode + " on "+require('os').hostname();
    if (argv.campfire) {
      if (!config.campfire) {
        console.error('Your configuration doesn\'t have campfire section. Please add it!')
        process.exit(1);
      }
      request.post({
        url:config.campfire.speak_url,
        body: {"message":{"body":header + "\n\n"+data, "type":"PasteMessage"}},
        auth: {user: config.campfire.apitoken},
        json: true
      })
    }
    if (argv.sentry) {
      if (!config.sentry || !config.sentry.dsn) {
        console.error('Your configuration doesn\'t have a sentry section or is missing the dsn. Please add it!')
        process.exit(1);
      }

      Sentry.init({
        dsn: config.sentry.dsn,
        environment: config.sentry.environment || "unknown",
        debug: true
      });
      Sentry.captureEvent({
        // Sentry uses the first line of the message as the title of the event/issue
        message: [header + "\n"] + data,
        tags: {
          task: run.task.id,
          exitStatus: run.exitCode,
          runID,
          host: require('os').hostname()
        }
      });

    }
    if (argv.slack) {
      if (!config.slack) {
        console.error('Your configuration doesn\'t have slack section. Please add it!')
        process.exit(1);
      }
      var payload = {
        text: "Oh noes! An ummon error!", 
        username: config.slack.username,
        attachments: [{
          fallback: header,
          text: data,
          // title: "title",
          fields: [
            {
              title: "Task",
              value: run.task.id,
              short: true
            },
            {
              title: "Exit status",
              value: run.exitCode,
              short: true
            },
            {
              title: "Run id",
              value: runID,
              short: true
            },
            {
              title: "Host",
              value: require('os').hostname(),
              short: true
            // },
            // {
            //   title: "Logs",
            //   value: data
            }
          ]
        }]
      };
      if (config.slack.icon_emoji) {
        payload.icon_emoji = config.slack.icon_emoji;
      }
      request.post({
        url: config.slack.webhook_url,
        body: JSON.stringify(payload)
      },function(e,r,body) {
        // console.log(body);
      });

    }
  })
)